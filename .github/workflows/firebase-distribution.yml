name: Firebase Distribution (KMP)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  distribute:
    runs-on: macos-latest

    env:
      ANDROID_APP_PATH: composeApp
      IOS_APP_PATH: iosApp
      ANDROID_APP_ID: ${{ secrets.ANDROID_APP_ID }}
      IOS_APP_ID: ${{ secrets.IOS_APP_ID }}
      FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      TESTER_GROUP: "new-release-updates"
      KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
      KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}

    steps:
      # ---------- 1. Checkout ----------
      - name: Checkout repository
        uses: actions/checkout@v4

      # ---------- 2. Setup JDK ----------
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # ---------- 3. Decode keystore ----------
      - name: Decode keystore
        run: |
          echo "$KEYSTORE_BASE64" | base64 --decode > $ANDROID_APP_PATH/keystore.jks
          ls -l $ANDROID_APP_PATH/keystore.jks

      # ---------- 4. Install Firebase Tools (Installed once globally) ----------
      - name: Install Firebase Tools
        run: npm install -g firebase-tools

      # ---------- 5. Increment Android version ----------
      - name: Increment Android versionCode
        run: |
          FILE="$ANDROID_APP_PATH/build.gradle.kts"
          # Get current code, assuming versionCode is on its own line followed by a number
          CURRENT_CODE=$(grep "versionCode" $FILE | grep -o '[0-9]\+' | head -n 1)
          NEW_CODE=$((CURRENT_CODE + 1))
          
          # Use sed to update versionCode and versionName
          sed -i "" "s/versionCode $CURRENT_CODE/versionCode $NEW_CODE/" $FILE
          VERSION_NAME="1.0.$NEW_CODE"
          # The regex 'versionName \".*\"' handles dynamic version names
          sed -i "" "s/versionName \".*\"/versionName \"$VERSION_NAME\"/" $FILE
          
          echo "Android versionCode=$NEW_CODE, versionName=$VERSION_NAME"

      # ---------- 6. Build Android APK ----------
      - name: Build Android APK
        run: ./gradlew :composeApp:assembleRelease

      # ---------- 7. Find Dynamic APK Path ----------
      - name: Find APK File Path
        id: find_apk
        run: |
          ANDROID_OUTPUT_DIR="$ANDROID_APP_PATH/build/outputs/apk/release"
          
          # Use 'find' to locate any file ending in .apk and take the first match
          APK_FILE_PATH=$(find "$ANDROID_OUTPUT_DIR" -name "*.apk" -print -quit)
          
          if [ -z "$APK_FILE_PATH" ]; then
            echo "Error: Could not find any .apk file in $ANDROID_OUTPUT_DIR"
            ls -R $ANDROID_APP_PATH/build/outputs/apk/
            exit 1
          fi
          
          # This command sets the output variable for the next step (GitHub Actions syntax)
          echo "::set-output name=apk_path::$APK_FILE_PATH"
          echo "Found APK at: $APK_FILE_PATH"

      # ---------- 8. Upload Android to Firebase (Uses Dynamic Path) ----------
      - name: Upload Android to Firebase
        run: |
          firebase appdistribution:distribute ${{ steps.find_apk.outputs.apk_path }} \
            --app "$ANDROID_APP_ID" \
            --groups "$TESTER_GROUP" \
            --release-notes "Android build from GitHub Actions - Commit ${{ github.sha }}" \
            --token "$FIREBASE_TOKEN"

      # ---------- 9. Setup Xcode ----------
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.0'

      # ---------- 10. Build KMP iOS Framework ----------
      - name: Build KMP iOS Framework
        run: ./gradlew :shared:packForXcode

      # ---------- 11. Increment iOS build number (FIXED: Increments by 1) ----------
      - name: Increment iOS build number
        run: |
          INFOPLIST="$IOS_APP_PATH/iosApp/Info.plist"
          
          # Read the current CFBundleVersion (Build Number)
          CURRENT_BUILD_NUMBER=$(/usr/libexec/PlistBuddy -c "Print :CFBundleVersion" $INFOPLIST)
          
          # Calculate the new build number
          NEW_BUILD_NUMBER=$((CURRENT_BUILD_NUMBER + 1))
          
          # Write the new build number back to the Info.plist
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $NEW_BUILD_NUMBER" $INFOPLIST
          
          echo "iOS build number incremented from $CURRENT_BUILD_NUMBER to $NEW_BUILD_NUMBER"

      # ---------- 12. Build iOS IPA ----------
      - name: Build iOS IPA
        run: |
          cd $IOS_APP_PATH
          # Archive the project
          xcodebuild \
            -workspace iosApp.xcworkspace \
            -scheme iosApp \
            -sdk iphoneos \
            -configuration Release \
            -archivePath build/iosApp.xcarchive archive
          # Export the IPA
          xcodebuild \
            -exportArchive \
            -archivePath build/iosApp.xcarchive \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath build

      # ---------- 13. Upload iOS to Firebase ----------
      - name: Upload iOS to Firebase
        run: |
          firebase appdistribution:distribute $IOS_APP_PATH/build/iosApp.ipa \
            --app "$IOS_APP_ID" \
            --groups "$TESTER_GROUP" \
            --release-notes "iOS build from GitHub Actions - Commit ${{ github.sha }}" \
            --token "$FIREBASE_TOKEN"